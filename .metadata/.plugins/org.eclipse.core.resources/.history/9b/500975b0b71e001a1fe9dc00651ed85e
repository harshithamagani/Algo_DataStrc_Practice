package algo.leet.code;

import exmaple.com.singly.linkedlist.Node;

class ListNode {
	     int val;
	      ListNode next;
	      ListNode(int x) { val = x; }
	  }

class SingleLinkedList{
	ListNode head;
	SingleLinkedList(){
		this.head=null;
	}
	
	public void insertAtEnd(int data){
		ListNode newNode=new ListNode(data);
		ListNode current = head;
		//list is empty
		if(current==null) {
			head = newNode;
		}
		else {
			while(current.next != null) {
				current = current.next;
			}
			current.next=newNode;
		}
	}
	
	public void reverse() {
		//empty list or single node
			if(head == null || head.next == null) {
				return;
			}
			Node <T> prev = null;
			Node <T> curr = head;
			Node <T> next = null;
			
			while(curr != null) {
				next = curr.next;
				curr.next = prev;
				prev = curr;
				curr = next;
			}
			head = prev;
		}
	
	public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
		
    }
}
class RevListNAddTwoNum {

}
